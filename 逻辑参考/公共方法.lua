



---=============================================================================--
-- ■ 粒子特效()
--=============================================================================--

function 粒子特效(x,y,类型)
	
	local test特效= 特效_粒子特效.创建(x,y,类型)
	
	table.insert(Q_屏幕.屏幕特效组,test特效)
	Q_屏幕:增加屏幕物件(test特效)
	
	return test特效
	
end 




---=============================================================================--
-- ■ 随机血迹()
--=============================================================================--

function 随机血迹(x,y)
	
	local test血迹 = 特效_地面血迹.创建(x,y)
	
	table.insert(Q_屏幕.屏幕特效组,test血迹)
	Q_屏幕:增加屏幕物件(test血迹)
	
end 




function 播放道具音效(道具对象)
	

	if ( 道具对象.子类 == "项链"   ) then 
		Q_游戏数据.音效组["道具_项链"]:播放()
	elseif ( 道具对象.子类 == "手镯"   ) then 
		Q_游戏数据.音效组["道具_手镯"]:播放()
	elseif ( 道具对象.子类 == "戒指"   ) then 
		Q_游戏数据.音效组["道具_戒指"]:播放()
	elseif ( 道具对象.子类 == "轻甲"   ) then 
		Q_游戏数据.音效组["道具_轻甲"]:播放()
	elseif ( 道具对象.子类 == "药水"   ) then 
		Q_游戏数据.音效组["道具_药水"]:播放()
	elseif ( 道具对象.子类 == "卷轴"   ) then 
		Q_游戏数据.音效组["道具_卷轴"]:播放()
	elseif ( 道具对象.子类 == "臂铠"   ) then 
		Q_游戏数据.音效组["道具_臂铠"]:播放()
	elseif ( 道具对象.子类 == "手套"   ) then 
		Q_游戏数据.音效组["道具_手套"]:播放()
	elseif ( 道具对象.子类 == "爪"   ) then 
		Q_游戏数据.音效组["道具_爪"]:播放()
		
	end 

	
end



function MSG(信息类型,信息内容,信息颜色,信息背景色)
	

     if (信息颜色 == nil) then
         信息颜色 = 颜色_白
     end

     if (信息背景色 == nil) then
         信息背景色 = 颜色_全透明
     end
     
     local _临时信息 ={}

      _临时信息.内容 = 信息内容
      _临时信息.颜色 = 信息颜色
      _临时信息.背景色 = 信息背景色
	_临时信息.开头 = true
	_临时信息.类型 = 信息类型
	_临时信息.表情数据组 = {}
	_临时信息.已经格式化 = false
	if (string.len(信息内容) > 0 ) then
 
		_临时信息.内容 = _临时信息.内容
		table.insert(Q_屏幕.聊天显示框.聊天显示框数据组,_临时信息)
		Q_屏幕.聊天显示框:更新聊天数据()
   
	end



end



--=============================================================================--
-- ■ 取物品()
--=============================================================================--

function 从名称取物品(物品名称)

	for n=1, table.getn(Q_游戏数据.游戏道具组) do
		if (Q_游戏数据.游戏道具组[n].名称 == 物品名称) then
			return  Q_游戏数据.游戏道具组[n]
		end
	end
	
	return  nil

end



---=============================================================================--
-- ■ 取升级所需经验()
--=============================================================================--

function 取升级所需经验(lv)
	
	if (lv <= 20) then
		return  math.ceil( 50 * lv ^ 2)
		
	elseif (lv > 20  and lv <= 35) then
		return  math.ceil( 50 * lv ^ 2.2)
		
	elseif (lv > 35 and lv <= 46) then
		return  math.ceil( 50 * lv ^ 2.4)
		
	elseif (lv > 46) then
		return  math.ceil( 50 * lv ^ 2.6)	
	end
	
	return  math.ceil( 50 * lv ^ 2)
	
end





---=============================================================================--
-- ■ 取图片缓存纹理()
--=============================================================================--

function 取图片缓存纹理(标识)
	
	local 临时逻辑值 = false 
	
	for n=1, #Q_游戏数据.缓存纹理组 do
		if ( Q_游戏数据.缓存纹理组[n].文件标识 == 标识 )  then
			临时逻辑值 = true
			return Q_游戏数据.缓存纹理组[n].图片
		end
	end
	
	
	if ( 临时逻辑值 == false)  then
		Q_游戏数据.缓存纹理组[#Q_游戏数据.缓存纹理组+1] = 
		{
			图片 = 引擎:载入图片( 标识),
			文件标识 = 标识
		}
		return Q_游戏数据.缓存纹理组[#Q_游戏数据.缓存纹理组].图片
	end 
	
	
	
	
end 






--===============================================================================
-- ■ 格式化文字()
--===============================================================================
function 格式化文字 (_文字,内容,行距)

	local 多彩文字 = {}
	local 多彩文字组 = {}
	local 颜色值 = 颜色_白
	local 总宽 = 0
	local 总高 = 0
	local 最后文本 = ""
	local _文字高度 = _文字:取高度("A")

	
	内容 = string.gsub(内容, "	","")  -- 将TAB符替换掉
	
	
     if( 内容 ~= ""  ) then

     local     _按行分割组 = 分割文本 (内容, "#")

			if (table.getn(_按行分割组)> 0 ) then
				   				  for n=1, table.getn(_按行分割组) do

						local   再分割文本组 = 分割文本(_按行分割组[n], "<")						   
								 if(table.getn(再分割文本组)>1) then

										 for j=1, table.getn(再分割文本组) do

											local  临时_偏移 = 0
												for s_n=1, j-2 do
												   临时_偏移  = 临时_偏移 + _文字:取宽度(再分割文本组[s_n] )
												end
												
											 if (string.find(再分割文本组[j],"红>") == 1 ) then
												颜色值 = ARGB(255,255,0,0)
											 elseif (string.find(再分割文本组[j],"白>") == 1 ) then
											      颜色值 = ARGB(255,255,255,255)
											 elseif (string.find(再分割文本组[j],"黄>") == 1 ) then
												颜色值 = ARGB(255,255,255,0)
											 elseif (string.find(再分割文本组[j],"蓝>") == 1 ) then
												颜色值 = ARGB(255,30,144,255)
											 elseif (string.find(再分割文本组[j],"淡>") == 1 ) then
												颜色值 = ARGB(128,255,255,255)
											 elseif (string.find(再分割文本组[j],"灰>") == 1 ) then
												颜色值 = -922746881
											 elseif (string.find(再分割文本组[j],"菊>") == 1 ) then
												颜色值 = -2952
											elseif (string.find(再分割文本组[j],"金>") == 1 ) then
												颜色值 = -16712192
											elseif (string.find(再分割文本组[j],"绿>") == 1 ) then
												颜色值 = 颜色_绿
											elseif (string.find(再分割文本组[j],"暗>") == 1 ) then
												颜色值 =-7499363
											elseif (string.find(再分割文本组[j],"HC>") == 1 ) then
												颜色值 =-1784166
											elseif (string.find(再分割文本组[j],"IL>") == 1 ) then
												颜色值 =-8208179
												
												
											 end
											 
		
											再分割文本组[j] =  string.sub(再分割文本组[j], 4)
											
											多彩文字 = 
											{
											内容 = 再分割文本组[j],
											颜色 = 颜色值,
											位置 = {x=临时_偏移+ _文字:取宽度(再分割文本组[j-1]),y= (n-1)*行距  + (n-1) * _文字高度},
											当前计次 = 0,
											当前文本 = "",
											字符组 =  分割为字符组(再分割文本组[j])											
											}
											最后文本 = 最后文本 .. 再分割文本组[j].."\n"	
											table.insert(多彩文字组,多彩文字)
											
										 end
								 else
									多彩文字 = 
									{
									内容 = _按行分割组[n],
									颜色 =颜色_白,
									位置 = {x=0,y= (n-1)*行距   + (n-1) * _文字高度},
									当前计次 = 0,
									当前文本 = "",
									字符组 =  分割为字符组(_按行分割组[n])					
									}				
									最后文本 = 最后文本 .. 再分割文本组[n] .."\n"					
									table.insert(多彩文字组,多彩文字)
								 end

						 end

					 else
								多彩文字 = 
								{
								内容 = 内容,
								颜色 =颜色_白,
								位置 = {x=0,y= 0},
								当前计次 = 0,
								当前文本 = "",
								字符组 =  分割为字符组(内容)									
								}									
								最后文本 = 最后文本 .. 内容
								table.insert(多彩文字组,多彩文字)					  
			 end

      
		总宽 = _文字:取宽度(最后文本)
		总高 = table.getn(_按行分割组) * (_文字高度 + 行距)
		
		return 多彩文字组,总宽,总高
	
      end



end 




function 初始化风格提示() 

	
	local 风格提示_上边图片 = 引擎:载入图片 ("Dat/popu/1/5.png")
	local 风格提示_下边图片 = 引擎:载入图片 ("Dat/popu/1/6.Png")
	local 风格提示_左边图片 = 引擎:载入图片 ("Dat/popu/1/7.Png")
	local 风格提示_右边图片 = 引擎:载入图片 ("Dat/popu/1/8.Png")
	
	local 风格提示_左上图片 = 引擎:载入图片 ("Dat/popu/1/1.Png")
	local 风格提示_左下图片 = 引擎:载入图片 ("Dat/popu/1/3.Png")
	local 风格提示_右上图片 = 引擎:载入图片 ("Dat/popu/1/2.Png")
	local 风格提示_右下图片 = 引擎:载入图片 ("Dat/popu/1/4.Png")
	local 风格提示_填充图片 = 引擎:载入图片 ("Dat/popu/1/9.Png")
	
	
	Q_游戏数据.风格提示组[1] = {
		文字 = 文字,
		内容 = "",
		文字宽度  = 0,
		文字高度 = 文字高度,
		上边精灵 = D2D_精灵.创建 (风格提示_上边图片,0,0,8,8),
		下边精灵 = D2D_精灵.创建 (风格提示_下边图片,0,0,8,8),
		左边精灵 = D2D_精灵.创建 (风格提示_左边图片,0,0,8,8),
		右边精灵 = D2D_精灵.创建 (风格提示_右边图片,0,0,8,8),
		左上精灵 = D2D_精灵.创建 (风格提示_左上图片,0,0,8,8),
		左下精灵 = D2D_精灵.创建 (风格提示_左下图片,0,0,8,8),
		右上精灵 = D2D_精灵.创建 (风格提示_右上图片,0,0,8,8),
		右下精灵 = D2D_精灵.创建 (风格提示_右下图片,0,0,8,8),
		填充精灵 = D2D_精灵.创建 (风格提示_填充图片,0,0,8,8)
	}
	
	
	
	
	风格提示_上边图片 = 引擎:载入图片 ("Dat/popu/2/5.png")
	风格提示_下边图片 = 引擎:载入图片 ("Dat/popu/2/6.Png")
	风格提示_左边图片 = 引擎:载入图片 ("Dat/popu/2/7.Png")
	风格提示_右边图片 = 引擎:载入图片 ("Dat/popu/2/8.Png")
	
	风格提示_左上图片 = 引擎:载入图片 ("Dat/popu/2/1.Png")
	风格提示_左下图片 = 引擎:载入图片 ("Dat/popu/2/3.Png")
	风格提示_右上图片 = 引擎:载入图片 ("Dat/popu/2/2.Png")
	风格提示_右下图片 = 引擎:载入图片 ("Dat/popu/2/4.Png")
	风格提示_填充图片 = 引擎:载入图片 ("Dat/popu/2/9.Png")
	
	
	Q_游戏数据.风格提示组[2] = {
		文字 = 文字,
		内容 = "",
		文字宽度  = 0,
		文字高度 = 文字高度,
		上边精灵 = D2D_精灵.创建 (风格提示_上边图片,0,0,8,8),
		下边精灵 = D2D_精灵.创建 (风格提示_下边图片,0,0,8,8),
		左边精灵 = D2D_精灵.创建 (风格提示_左边图片,0,0,8,8),
		右边精灵 = D2D_精灵.创建 (风格提示_右边图片,0,0,8,8),
		左上精灵 = D2D_精灵.创建 (风格提示_左上图片,0,0,8,8),
		左下精灵 = D2D_精灵.创建 (风格提示_左下图片,0,0,8,8),
		右上精灵 = D2D_精灵.创建 (风格提示_右上图片,0,0,8,8),
		右下精灵 = D2D_精灵.创建 (风格提示_右下图片,0,0,8,8),
		填充精灵 = D2D_精灵.创建 (风格提示_填充图片,0,0,8,8)
	}
	
	
	
	
	风格提示_上边图片 = 引擎:载入图片 ("Dat/popu/3/5.png")
	风格提示_下边图片 = 引擎:载入图片 ("Dat/popu/3/6.Png")
	风格提示_左边图片 = 引擎:载入图片 ("Dat/popu/3/7.Png")
	风格提示_右边图片 = 引擎:载入图片 ("Dat/popu/3/8.Png")
	
	风格提示_左上图片 = 引擎:载入图片 ("Dat/popu/3/1.Png")
	风格提示_左下图片 = 引擎:载入图片 ("Dat/popu/3/3.Png")
	风格提示_右上图片 = 引擎:载入图片 ("Dat/popu/3/2.Png")
	风格提示_右下图片 = 引擎:载入图片 ("Dat/popu/3/4.Png")
	风格提示_填充图片 = 引擎:载入图片 ("Dat/popu/3/9.Png")
	
	
	Q_游戏数据.风格提示组[3] = {
		文字 = 文字,
		内容 = "",
		文字宽度  = 0,
		文字高度 = 文字高度,
		上边精灵 = D2D_精灵.创建 (风格提示_上边图片,0,0,8,8),
		下边精灵 = D2D_精灵.创建 (风格提示_下边图片,0,0,8,8),
		左边精灵 = D2D_精灵.创建 (风格提示_左边图片,0,0,8,8),
		右边精灵 = D2D_精灵.创建 (风格提示_右边图片,0,0,8,8),
		左上精灵 = D2D_精灵.创建 (风格提示_左上图片,0,0,8,8),
		左下精灵 = D2D_精灵.创建 (风格提示_左下图片,0,0,8,8),
		右上精灵 = D2D_精灵.创建 (风格提示_右上图片,0,0,8,8),
		右下精灵 = D2D_精灵.创建 (风格提示_右下图片,0,0,8,8),
		填充精灵 = D2D_精灵.创建 (风格提示_填充图片,0,0,8,8)
	}
	
	
	
	
	
	
	
	

end 






--=============================================================================--
-- ■ 显示风格框
--=============================================================================--

function 显示风格框(x,y,宽度,高度,透明度,风格ID) 

	Q_游戏数据.风格提示组[风格ID].左上精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].左边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].左下精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].上边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].下边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右上精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右下精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].填充精灵:置颜色(ARGB(透明度,255,255,255))

	Q_游戏数据.风格提示组[风格ID].左上精灵:显示 (x, y)
	Q_游戏数据.风格提示组[风格ID].左边精灵:置显示区域 (0, 0, 8, 高度)
	Q_游戏数据.风格提示组[风格ID].左边精灵:显示 (x, y + 8)
	Q_游戏数据.风格提示组[风格ID].左下精灵:显示 (x, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].上边精灵:置显示区域 (0, 0, 宽度, 8)
	Q_游戏数据.风格提示组[风格ID].上边精灵:显示 (x + 8, y)
	Q_游戏数据.风格提示组[风格ID].下边精灵:置显示区域 (0, 0, 宽度, 8)
	Q_游戏数据.风格提示组[风格ID].下边精灵:显示 (x +8, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].右上精灵:显示 (x + 8 + 宽度, y)
	Q_游戏数据.风格提示组[风格ID].右边精灵:置显示区域 (0, 0, 8, 高度)
	Q_游戏数据.风格提示组[风格ID].右边精灵:显示 (x + 8 + 宽度, y + 8)
	Q_游戏数据.风格提示组[风格ID].右下精灵:显示 (x + 8 + 宽度, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].填充精灵:置显示区域 (0, 0, 宽度, 高度)
	Q_游戏数据.风格提示组[风格ID].填充精灵:显示 (x + 8, y + 8)
	
end 





--=============================================================================--
-- ■ 显示风格提示
--=============================================================================--

function 显示风格提示 (x,y,风格文字组,宽度,高度,透明度,间距,风格ID,标识,arg1,arg2)       
-- 标识: 1:道具 arg1:道具 

	if (标识 == 2 ) then
		高度 = 高度 + 5
	end




	Q_游戏数据.风格提示组[风格ID].文字:置颜色(颜色_白) 
	Q_游戏数据.风格提示组[风格ID].文字宽度  =   宽度
	Q_游戏数据.风格提示组[风格ID].文字高度  =   高度

	local  文字_描边显示_ = 文字_描边显示 
	
	if (x<=2 ) then
		x=   2
	end
	
	
	if (y+高度 > Q_游戏数据.屏幕高度 ) then
		y=   y -((y+高度) - Q_游戏数据.屏幕高度 ) -20
		
	elseif (y<=2) then 
		y = 2
	end
--	

	Q_游戏数据.风格提示组[风格ID].左上精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].左边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].左下精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].上边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].下边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右上精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右边精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].右下精灵:置颜色(ARGB(透明度,255,255,255))
	Q_游戏数据.风格提示组[风格ID].填充精灵:置颜色(ARGB(透明度,255,255,255))


	Q_游戏数据.风格提示组[风格ID].左上精灵:显示 (x, y)
	Q_游戏数据.风格提示组[风格ID].左边精灵:置显示区域 (0, 0, 8, 高度)
	Q_游戏数据.风格提示组[风格ID].左边精灵:显示 (x, y + 8)
	Q_游戏数据.风格提示组[风格ID].左下精灵:显示 (x, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].上边精灵:置显示区域 (0, 0, 宽度, 8)
	Q_游戏数据.风格提示组[风格ID].上边精灵:显示 (x + 8, y)
	Q_游戏数据.风格提示组[风格ID].下边精灵:置显示区域 (0, 0, 宽度, 8)
	Q_游戏数据.风格提示组[风格ID].下边精灵:显示 (x +8, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].右上精灵:显示 (x + 8 + 宽度, y)
	Q_游戏数据.风格提示组[风格ID].右边精灵:置显示区域 (0, 0, 8, 高度)
	Q_游戏数据.风格提示组[风格ID].右边精灵:显示 (x + 8 + 宽度, y + 8)
	Q_游戏数据.风格提示组[风格ID].右下精灵:显示 (x + 8 + 宽度, y + 8 + 高度)
	Q_游戏数据.风格提示组[风格ID].填充精灵:置显示区域 (0, 0, 宽度, 高度)
	Q_游戏数据.风格提示组[风格ID].填充精灵:显示 (x + 8, y + 8)



	
	for n=1,#风格文字组 do 
		--文字:置颜色(风格文字组[n].颜色)
		--文字:显示(x+8+ 风格文字组[n].位置.x,y + 10+ 风格文字组[n].位置.y,风格文字组[n].内容)
		
		文字_描边显示_(文字,x+8+ 风格文字组[n].位置.x,y + 10+ 风格文字组[n].位置.y,风格文字组[n].内容,风格文字组[n].颜色,颜色_黑)
	
	end 
	
	if (标识 == 1) then
		
		
		--文字_描边显示_(文字_12_粗,x+8,y + 10,arg1.名称,arg1.颜色值_,颜色_黑)
		引擎:画线(x+8,y+30,x+宽度+4,y+30,ARGB(80,255,255,255))
		
	end

	
	
	
end 







--=============================================================================--
-- ■ 初始化怪物数据()
--=============================================================================--

function 初始化怪物数据()

	if(文件是否存在( "Dat/conf/monster.csv" ) == false) then
		return 
	end 

	local f = assert(io.open("Dat/conf/monster.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时怪物= {}
	local  再次分割 = {}

	
	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

				再次分割 = 分割文本(首次分割[n], ",")

				if (table.getn(再次分割) == 15) then

					临时怪物 = 
					{
						标识 = 再次分割[1],
						名称=  再次分割[2],	
						头像 = 再次分割[3],
						HP = tonumber( 再次分割[4] ),
						血条长度 = tonumber( 再次分割[5] ),
						物攻 = tonumber( 再次分割[6] ),
						魔攻 = tonumber( 再次分割[7] ),
						物防 = tonumber( 再次分割[8] ),
						魔防 = tonumber( 再次分割[9] ),
						移动速度 = tonumber( 再次分割[10] ),
						移动间隔 = tonumber( 再次分割[11] ),
						重量 = tonumber( 再次分割[12] ),
						Y攻击范围 = tonumber( 再次分割[13] ),
						X攻击范围 = tonumber( 再次分割[14] ),
						碎片大小 = tonumber( 再次分割[15] )
					}
					
					if (临时怪物.头像 ~= "") then
						local 头像图片 = 引擎:载入图片( "Dat/npcface/" .. 临时怪物.头像)	
						临时怪物.头像精灵 = D2D_精灵.创建(头像图片,0,0,24,24)
					end
	
					Q_游戏数据.游戏怪物组[临时怪物.标识] = 临时怪物
					
					--table.insert(Q_游戏数据.游戏NPC组,临时NPC)
					
					
				end

		end
		
	end


end 











--=============================================================================--
-- ■ 初始化NPC数据()
--=============================================================================--

function 初始化NPC数据()


	if(文件是否存在( "Dat/conf/npc.csv" ) == false) then
		return 
	end 


	local f = assert(io.open("Dat/conf/npc.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时NPC = {}
	local  再次分割 = {}

	
	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

				再次分割 = 分割文本(首次分割[n], ",")

				if (table.getn(再次分割) ==14) then

					临时NPC = 
					{
						标识 = 再次分割[1],
						名称=  再次分割[2],	
						开始帧= tonumber( 再次分割[3] ),	
						结束帧= tonumber( 再次分割[4] ),	
						帧率 = tonumber( 再次分割[5] ),	
						中心点x = tonumber( 再次分割[6] ),	
						中心点y =  tonumber( 再次分割[7] ),
						名称x偏移 =  tonumber( 再次分割[8] ),
						名称y偏移 =  tonumber( 再次分割[9] ),
						类型 = 再次分割[10],
						菜单头像 = 再次分割[11],
						对话头像 = 再次分割[12],
						窗口头像 = 再次分割[13],
						资源文件 = 再次分割[14],
					}
					
					if (临时NPC.菜单头像 ~= "") then
						临时NPC.菜单头像图片 = 引擎:载入图片( "Dat/npcface/" .. 临时NPC.菜单头像)	
					end
	
					if (临时NPC.对话头像 ~= "") then
						临时NPC.对话头像图片 = 引擎:载入图片( "Dat/npcface/" .. 临时NPC.对话头像)	
					end
					
					if (临时NPC.窗口头像 ~= "") then
						临时NPC.窗口头像图片 = 引擎:载入图片( "Dat/npcface/" .. 临时NPC.窗口头像)	
					end
					
					
					Q_游戏数据.游戏NPC组[临时NPC.标识] = 临时NPC
					
					--table.insert(Q_游戏数据.游戏NPC组,临时NPC)
					
					

				end

		end
		
	end


end 






--=============================================================================--
-- ■ 初始化道具数据()
--=============================================================================--

function 初始化道具数据()

	local f = assert(io.open("Dat/conf/item.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时道具 = {}
	local  再次分割 = {}

	local a = 0
	
	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

				再次分割 = 分割文本(首次分割[n], ",")
				
				if (table.getn(再次分割) == 23) then
					a = a + 1
					
					临时道具 = 
					{
						id = a,
						名称 = 再次分割[1],
						总类 = 再次分割[2],
						分类 = 再次分割[3],
						子类 = 再次分割[4],
						道具图标 = 再次分割[5],
						地面图标 = 再次分割[6],
						限制职业 = 再次分割[7],
						颜色值 = 再次分割[8],
						可叠加 = (tonumber( 再次分割[9] )==1 and true) or false,
						需要等级 = tonumber( 再次分割[10] ),
						重量 = tonumber( 再次分割[11] ),
						价格 = tonumber( 再次分割[12] ),
						物理攻击 = tonumber( 再次分割[13] ),
						魔法攻击 = tonumber( 再次分割[14] ),
						物理防御 = tonumber( 再次分割[15] ),
						魔法防御 = tonumber( 再次分割[16] ),
						力量 = tonumber( 再次分割[17] ),
						体力 = tonumber( 再次分割[18] ),
						智力 = tonumber( 再次分割[19] ),
						精神 = tonumber( 再次分割[20] ),
						移动速度 = tonumber( 再次分割[21] ),
						攻击速度 = tonumber( 再次分割[22] ),
						道具说明 =  再次分割[23] ,
						品级 = 0,
						
					}
					
					临时道具.道具说明 = 按行格式化文本(临时道具.道具说明,文字,16)
					
					if (临时道具.道具图标 ~= "0") then 
						
						
						临时图片 = 引擎:载入图片("Dat/itemico/" .. 临时道具.道具图标)
						临时道具.精灵 =  D2D_精灵.创建(临时图片,0,0,引擎:取图片宽度(临时图片),引擎:取图片高度(临时图片))
						临时道具.精灵:置中心点(14,14)
						
					end
					
					临时道具.颜色值_ = 颜色_白
					
					 if (临时道具.颜色值 == "红" ) then
						临时道具.颜色值_ = ARGB(255,255,0,0)
					 elseif (临时道具.颜色值 == "白" ) then
					      临时道具.颜色值_ = ARGB(255,255,255,255)
					 elseif (临时道具.颜色值 == "黄" ) then
						临时道具.颜色值_ = ARGB(255,255,255,0)
					 elseif (临时道具.颜色值 == "蓝" ) then
						临时道具.颜色值_ = ARGB(255,30,144,255)
					 elseif (临时道具.颜色值 == "淡" ) then
						临时道具.颜色值_ = ARGB(128,255,255,255)
					 elseif (临时道具.颜色值 == "灰" ) then
						临时道具.颜色值_ = -922746881
					 elseif (临时道具.颜色值 == "菊" ) then
						临时道具.颜色值_ = -2952
					elseif (临时道具.颜色值 == "金" ) then
						临时道具.颜色值_ = -16712192
					elseif (临时道具.颜色值 == "绿" ) then
						临时道具.颜色值_ = 颜色_绿
					elseif (临时道具.颜色值 == "暗" ) then
						临时道具.颜色值_ =-7499363
					elseif (临时道具.颜色值 == "IL" ) then
						临时道具.颜色值_ = -8208179
					 end
					
					
					
					
				
					table.insert(Q_游戏数据.游戏道具组,临时道具)

				end

		end
		
	end

end 




--=============================================================================--
-- ■ 初始化特效数据()
--=============================================================================--

function 初始化特效数据()

	local f = assert(io.open("Dat/conf/effect.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时特效 = {}
	local  再次分割 = {}

	
	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

				再次分割 = 分割文本(首次分割[n], ",")

				if (table.getn(再次分割) == 11 ) then
					
					Q_游戏数据.特效配置组[再次分割[1]] = 
					{
						名称 = 再次分割[1],
						开始帧= tonumber( 再次分割[2] ),	
						结束帧= tonumber( 再次分割[3] ),	
						帧率 = tonumber( 再次分割[4] ),	
						中心点x = tonumber( 再次分割[5] ),	
						中心点y =  tonumber( 再次分割[6] ),
						混合=  tonumber( 再次分割[7] ),
						颜色值=  再次分割[8],
						参照点偏移x =  tonumber( 再次分割[9] ),
						参照点偏移y =  tonumber( 再次分割[10] ),
						资源包=  再次分割[11]
					}

				end

		end
		
	end

end 





--=============================================================================--
-- ■ 初始化技能数据()
--=============================================================================--

function 初始化技能数据()

	local f = assert(io.open("Dat/conf/skill.csv", "r"))
	local t = f:read("*all")
	f:close()

	local  首次分割 = 分割文本(t, "\n")
	local  临时技能 = {}
	local  再次分割 = {}
	
	for n=2, table.getn(首次分割) do

		if (首次分割[n] ~= "") then

			再次分割 = 分割文本(首次分割[n], ",")
			
			if (table.getn(再次分割) == 9 ) then
				
				临时技能 = 
				{
					名称 = 再次分割[1],
					职业 = 再次分割[2],
					图标 = 再次分割[3],
					需要等级 = tonumber( 再次分割[4] ),
					CD = tonumber( 再次分割[5] ),
					消耗MP= tonumber( 再次分割[6] ),	
					操作 = 再次分割[7],
					效果 = 再次分割[8],
					说明 = 再次分割[9],
					熟练 = 0,
					等级 = 0  ,
					延时时间参考 = 0,
					延时时间 = 0,
					可用 = false
					
				}
				
			
				if (临时技能.图标 ~= "") then 
					临时图片 = 引擎:载入图片("Dat/skillico/" .. 临时技能.图标)
					临时技能.精灵 =  D2D_精灵.创建(临时图片,0,0,引擎:取图片宽度(临时图片),引擎:取图片高度(临时图片))
				end				
				
				临时技能.说明 = 按行格式化文本(临时技能.说明,文字,14)
				
	
				临时技能.CD特效 =  类_新PAK类.创建("Dat/pak/effect/other.pak",31,true)
				临时技能.CD特效:置混合 (混合_颜色乘)
				临时技能.特效显示 = false 
				
				
				
				Q_游戏数据.游戏技能组[临时技能.名称] = 临时技能
				
				
			end

		end
		
	end

end 





--=============================================================================--
-- ■ 格式化道具属性()
--=============================================================================--

function 格式化道具属性(道具,是否是商店)
	
	local 道具信息 = ""
	local 攻击速度效果 = ""
	
	道具.属性数 = 0
	
	道具信息 = "<" .. 道具.颜色值 .. ">" .. 道具.名称

	道具信息 = 道具信息 .. string.format("#<白>#<白>%0.1fkg%23s金币",道具.重量,数值到格式文本(道具.价格,0,true))
	道具信息 = 道具信息 .. string.format("#<白>%s%28s",道具.子类,道具. 分类)
	
	
	if (道具.分类 == "武器") then 
		if (道具.子类 == "手套") then
			攻击速度效果 = "快速攻击速度"
		elseif (道具.子类 == "臂铠") then
			攻击速度效果 = "缓慢攻击速度"
		elseif (道具.子类 == "爪") then
			攻击速度效果 = "普通攻击速度"
		end
		道具信息 = 道具信息 .. string.format("#<白>%s",攻击速度效果)
	end
	
	
	道具信息 = 道具信息 .. string.format("#<白>LV%d级以上可以使用%15s",道具.需要等级,道具.限制职业)

	
	道具信息 = 道具信息 .. "#<白>"
	
	if (道具.分类 == "药品") then 
		
		if (道具.物理攻击 > 0) then
			道具信息 = 道具信息 .. string.format("#<白>HP：+%d",道具.物理攻击)
		end
		
		if (道具.魔法攻击 > 0) then
			道具信息 = 道具信息 .. string.format("#<白>MP：+%d",道具.魔法攻击)
		end
		
		return 道具信息
		
	end
	
	if (道具.物理攻击 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>物理攻击：+%d",道具.物理攻击)
	end
	
	if (道具.魔法攻击 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>魔法攻击：+%d",道具.魔法攻击)
	end
	
	
	if (道具.物理防御 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>物理防御：+%d",道具.物理防御)
	end
	
	if (道具.魔法防御 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>魔法防御：+%d",道具.魔法防御)
	end
	
	if (道具.力量 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>力量：+%d",道具.力量)
	end
	
	if (道具.体力 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>体力：+%d",道具.体力)
	end
	
	if (道具.智力 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>智力：+%d",道具.智力)
	end
	
	if (道具.精神 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>精神：+%d",道具.精神)
	end
	
	
	if (道具.移动速度 > 0) then
		道具信息 = 道具信息 .. string.format("#<白>#<IL>移动速度：+%d%%",道具.移动速度)
	end
	

	if (道具.道具说明 ~="") then 
		道具信息 = 道具信息 .. string.format("#<灰>#<灰>%s",道具.道具说明)
		
		for n=2,#分割文本(道具.道具说明,"\n") do
			道具信息 = 道具信息 .. "#<白>"
		end
		
		
	end
	
	
	
	
	
	return 道具信息

end 







--=============================================================================--
-- ■ 格式化技能属性()
--=============================================================================--

function 格式化技能属性(技能)
	
	local 技能信息 = ""
	local 攻击速度效果 = ""
	
	
	
	
	技能信息 = 技能.名称
	技能信息 = 技能信息 .. string.format("#<白>职业：%s %16s",技能.职业,"MP:" .. 技能.消耗MP)
	技能信息 = 技能信息 .. string.format("#<白>冷却：%d秒",技能.CD)
	
	技能信息 = 技能信息 .. string.format("#<白>操作：%s",技能.操作)
	技能信息 = 技能信息 .. "#<白>"
	技能信息 = 技能信息 .. string.format("#<白>%s",技能.效果)
	技能信息 = 技能信息 .. "#<白>"
	技能信息 = 技能信息 .. "#<白>说明："
	技能信息 = 技能信息 .. string.format("#<白>%s",技能.说明)
	for n=2,#分割文本(技能.说明,"\n") do
		技能信息 = 技能信息 .. "#<白>"
	end
	
	
	
	return 技能信息

end 















--=============================================================================--
-- ■ __包围盒碰撞检测()
--=============================================================================--

function __包围盒碰撞检测(包围盒A,包围盒B)
	
	

	local x1 = 包围盒A:取顶点x()
	local y1 = 包围盒A:取顶点y()
	local w1 = 包围盒A:取宽度()
	local h1 = 包围盒A:取高度()
	
	
	local x2 = 包围盒B:取顶点x()
	local y2 = 包围盒B:取顶点y()
	local w2 = 包围盒B:取宽度()
	local h2 = 包围盒B:取高度()
	
	

   if (x1 + w1 > x2 and x1 < x2 + w2 and y1 + h1 > y2 and y1 < y2 + h2) then 
	return true
   end

	return false


end 




--=============================================================================--
-- ■ 精确小数()
--=============================================================================--

function 精确小数(小数,位数)
	return tonumber(string.format("%." .. 位数 .. "f",小数))
end 


--=============================================================================--
-- ■ 取整_
--=============================================================================--

function 取整_(num) 

     if num >= 0 then return math.floor(num+.5) 

     else return math.ceil(num-.5) end

end


--=============================================================================--
-- ■ 取PAK缓存()
--=============================================================================--

function 取PAK缓存(标识)

	for n=1,table.getn(Q_游戏数据.PAK资源缓存池) do 
	
		if (Q_游戏数据.PAK资源缓存池[n].标识 == 标识) then 
			return Q_游戏数据.PAK资源缓存池[n]
		end 
	
	end 
	
	return nil

end 


--=============================================================================--
-- ■ 初始化PAK缓存池()
--=============================================================================--

function 初始化PAK缓存池()

local a = 取启动时间()

	for n=1,table.getn(Q_游戏数据.PAK资源组) do 
	
		local 临时PAK = {}
		临时PAK.标识 = Q_游戏数据.PAK资源组[n]
		
		local  文件号  = 打开文件(临时PAK.标识,1,1)
		local PAK信息 = 引擎:取pak信息(文件号)
		
		if(PAK信息 == nil)then
			调试输出("无法获取PAK文件信息!" .. 临时PAK.标识)
			引擎:Log("无法获取PAK文件信息!" .. 临时PAK.标识)
			return 
		end
			
		local  首次分割 = 分割文本(PAK信息, "\n") 
		
		临时PAK.文件号 = 文件号
		临时PAK.PAK信息组 = {}
		
		for n =1 , table.getn(首次分割) do
	
			local 再一层分割文本组 = 分割文本 (首次分割[n],",")
	
			if (table.getn(再一层分割文本组) == 5) then
	
				临时PAK.PAK信息组[n]=
				{
					编号 = tonumber( 再一层分割文本组[1] ),
					偏移 = tonumber( 再一层分割文本组[2] ),
					图片大小	= tonumber( 再一层分割文本组[3] ),
					中心x	= tonumber( 再一层分割文本组[4] ),
					中心y	= tonumber( 再一层分割文本组[5])
				}
			end
			
		end
			
			
		--关闭文件(文件号 )
		
		table.insert(Q_游戏数据.PAK资源缓存池,临时PAK)

	end 
	
	
	Log__("PAK资源信息预读时间:" .. 取启动时间()- a .."毫秒" )
	


end 


function Log__(内容)
	
	调试输出(内容)
	
	引擎:Log(os.date() .. "  "  .. 内容)

end 





function 复制表(object)
    local lookup_table = {}
    local function _copy(object)
        if type(object) ~= "table" then
            return object
        elseif lookup_table[object] then
            return lookup_table[object]
        end
        local new_table = {}
        lookup_table[object] = new_table
        for index, value in pairs(object) do
            new_table[_copy(index)] = _copy(value)
        end
        return setmetatable(new_table, getmetatable(object))
    end
    return _copy(object)
end




function 修改变量数值(_数值)
	return __位异或(_数值,Q_游戏数据.__x)
end

function 增减游戏变量(_变量,_数值)
	_变量 = __位异或( __位异或(_变量,Q_游戏数据.__x)+_数值,Q_游戏数据.__x)
	return _变量
end

function 取实际(_变量)
	return __位异或(_变量,Q_游戏数据.__x)
end




--=============================================================================--
--■ 文字_描边显示
--=============================================================================--

function  文字_描边显示(_文字,x,y,内容,文字颜色,描边颜色)

	_文字:显示_描边(math.ceil(x),math.ceil(y),内容,文字颜色,描边颜色)	
		
end









--=============================================================================--
--■ 文字_描边显示
--=============================================================================--

function  初始化掉宝配置()
	
	Q_游戏数据.游戏怪物组["哥布林"].掉宝配置 = 
	{
		"金币 1/5 10",
		"林纳斯的新手手套 1/60",
		"林纳斯的新手臂铠 1/60",
		"林纳斯的新手爪 1/60",
		"林纳斯的轻甲护胸 1/60",
		"林纳斯的轻甲护腿 1/60",
		"林纳斯的轻甲短靴 1/60",
		"林纳斯的轻甲腰带 1/60",
		"林纳斯的新手项链 1/100",
		"林纳斯的新手手镯 1/100",
		"林纳斯的新手戒指 1/100",
		"初级HP恢复药水 1/20",
		
	}
	
	Q_游戏数据.游戏怪物组["投掷哥布林"].掉宝配置 = 
	{
		"金币 1/5 20",
		"林纳斯的新手手套 1/30",
		"林纳斯的新手臂铠 1/30",
		"林纳斯的新手爪 1/30",
		"林纳斯的轻甲护胸 1/30",
		"林纳斯的轻甲护腿 1/30",
		"林纳斯的轻甲短靴 1/30",
		"林纳斯的轻甲腰带 1/30",
		"林纳斯的新手项链 1/50",
		"林纳斯的新手手镯 1/50",
		"林纳斯的新手戒指 1/50",
		"初级HP恢复药水 1/10",
		
	}
	
end




---=============================================================================--
-- ■ 取怪物掉宝()
--=============================================================================--

function 取怪物掉宝(标识,掉宝配置)
	
	local 新怪物 = {
		怪物标识 = 标识,
		掉宝数据表 = {}
	}
	
	for n=1, #掉宝配置 do
		
		if (掉宝配置[n] ~= "") then
		
			local 分割文本组 = 分割文本(掉宝配置[n], " ")
			local 掉落几率 = 分割文本 (分割文本组 [2], "/")
			local 临时掉宝  = {}
			
			临时掉宝.道具标识 = 分割文本组 [1]
			临时掉宝.最小几率 = tonumber (掉落几率 [1])
			临时掉宝.最大几率 = tonumber (掉落几率 [2])
			临时掉宝.掉落数量 = 1
			
			
			if ( #分割文本组 == 3 ) then -- 掉落多个物品(金币)
				
				if (临时掉宝.道具标识 == "金币") then
					临时掉宝.掉落数量 = tonumber (分割文本组 [3])
				end
				
			end 
			
			
			临时掉宝.物品道具 = 从名称取物品(临时掉宝.道具标识)
			
			table.insert(新怪物.掉宝数据表,临时掉宝)
		
		end

		
	end


	
	table.insert(Q_游戏数据.怪物掉宝组,新怪物)
	
	
	
	return 新怪物.掉宝数据表
	
	
	
	

end







